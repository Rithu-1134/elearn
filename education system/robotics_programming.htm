<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="icon" href="image/logo.webp">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Robotics Programming Basics</title>
    <link rel="stylesheet" href="sty.css">
</head>
<body>
    <header>
        <h1>Robotics Programming Basics</h1>
    </header>

    <main>
        <section id="section1" class="course-section">
            <h2>Introduction to Robotics Programming</h2>
            <p><strong>Definition:</strong> Robotics programming is the process of creating software that instructs robots on how to perform tasks. This involves programming sensors, actuators, and control systems to enable the robot to interact with its environment effectively.</p>
            <p><strong>Goals:</strong> The primary goals are to enable robots to sense their surroundings, process this information, make decisions, and perform actions autonomously or semi-autonomously.</p>
        </section>

        <section id="section2" class="course-section">
            <h2>Key Concepts in Robotics Programming</h2>
            <h3>Sensors and Actuators</h3>
            <p><strong>Sensors:</strong> Devices that gather information about the robot’s environment (e.g., cameras, ultrasonic sensors, LIDAR).</p>
            <p><strong>Actuators:</strong> Devices that cause movement or action (e.g., motors, servos, hydraulic systems).</p>
            <h3>Control Systems</h3>
            <p><strong>Feedback Loops:</strong> Systems that use feedback to maintain desired outputs, essential for stability and performance.</p>
            <p><strong>PID Controllers:</strong> Proportional-Integral-Derivative controllers used to maintain a system at a set point.</p>
            <h3>Kinematics and Dynamics</h3>
            <p><strong>Kinematics:</strong> The study of motion without considering forces (e.g., forward and inverse kinematics).</p>
            <p><strong>Dynamics:</strong> The study of forces and torques and their effect on motion.</p>
        </section>

        <section id="section3" class="course-section">
            <h2>Popular Programming Languages for Robotics</h2>
            <p><strong>Python:</strong> Widely used for its simplicity and readability. Libraries like ROS (Robot Operating System), PyRobot, and OpenCV are commonly used.</p>
            <p><strong>C/C++:</strong> Known for performance and efficiency, essential for real-time control. Commonly used with microcontrollers and embedded systems.</p>
            <p><strong>Java:</strong> Used in some robotics applications, especially in robotics software frameworks like JADE (Java Agent DEvelopment framework).</p>
            <p><strong>MATLAB/Simulink:</strong> Used for algorithm development and simulation, particularly in academic and research settings.</p>
        </section>

        <section id="section4" class="course-section">
            <h2>Essential Tools and Frameworks</h2>
            <p><strong>Robot Operating System (ROS):</strong> A flexible framework for writing robot software. It provides tools and libraries to help build complex and robust robot behavior. Components include ROS nodes, topics, services, and actions.</p>
            <p><strong>Gazebo:</strong> A robot simulation tool integrated with ROS, useful for testing and development without physical robots.</p>
            <p><strong>Arduino:</strong> An open-source electronics platform based on easy-to-use hardware and software, ideal for beginners.</p>
            <p><strong>Raspberry Pi:</strong> A small, affordable computer used in robotics projects for processing and control tasks.</p>
        </section>

        <section id="section5" class="course-section">
            <h2>Basic Programming Concepts in Robotics</h2>
            <h3>Writing Code to Control Motors</h3>
            <pre><code class="python">
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BCM)
motor_pin = 18
GPIO.setup(motor_pin, GPIO.OUT)
motor_pwm = GPIO.PWM(motor_pin, 1000)
motor_pwm.start(50)  # Start PWM with 50% duty cycle
            </code></pre>
            <h3>Reading Sensor Data</h3>
            <pre><code class="python">
import Adafruit_DHT
sensor = Adafruit_DHT.DHT22
pin = 4
humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)
print(f'Temperature: {temperature}°C, Humidity: {humidity}%')
            </code></pre>
            <h3>Simple Robot Movement Logic</h3>
            <pre><code class="cpp">
#include &lt;ros/ros.h&gt;
#include &lt;geometry_msgs/Twist.h&gt;

int main(int argc, char** argv){
    ros::init(argc, argv, "move_robot");
    ros::NodeHandle nh;
    ros::Publisher cmd_vel_pub = nh.advertise&lt;geometry_msgs::Twist&gt;("/cmd_vel", 10);
    geometry_msgs::Twist cmd_vel;
    
    cmd_vel.linear.x = 0.5;  // Move forward with speed 0.5 m/s
    cmd_vel.angular.z = 0.0;  // No rotation
    
    ros::Rate rate(10);
    while(ros::ok()){
        cmd_vel_pub.publish(cmd_vel);
        ros::spinOnce();
        rate.sleep();
    }
    return 0;
}
            </code></pre>
        </section>

        <section id="section6" class="course-section">
            <h2>Debugging and Testing</h2>
            <p><strong>Simulation Testing:</strong> Use tools like Gazebo for testing algorithms in a virtual environment before deploying them to real robots.</p>
            <p><strong>Logging and Diagnostics:</strong> Implement logging and debugging features to monitor robot status and diagnose issues.</p>
            <pre><code class="python">
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

logger.debug('This is a debug message')
logger.info('Robot is starting')
logger.warning('Low battery warning')
logger.error('Motor failed')
            </code></pre>
        </section>

        <section id="section7" class="course-section">
            <h2>Practical Tips for Beginners</h2>
            <p><strong>Start Small:</strong> Begin with simple projects like line-following robots or obstacle avoidance.</p>
            <p><strong>Use Tutorials and Online Communities:</strong> Leverage resources like online courses, forums, and community projects.</p>
            <p><strong>Iterative Development:</strong> Build and test in small steps, iterating on your design and code based on testing results.</p>
        </section>

        <section id="section8" class="course-section">
            <h2>Conclusion</h2>
            <p>Robotics programming is a gateway to creating intelligent machines that can perform complex tasks. By understanding the basics, leveraging the right tools, and continuously experimenting and learning, you can develop skills to build and program robots that interact with the world in meaningful ways.</p>
        </section>
    </main>

    <footer>
        <div class="completion">
            <input type="checkbox" id="completion-checkbox">
            <label for="completion-checkbox">I have gone through all sections</label>
            <button id="go-back-btn" onclick="window.location.href='index.html'">Go Back to Main Page</button>
        </div>
        <p>&copy; 2024 E-LearnX. All rights reserved.</p>
    </footer>

    <script>
        // JavaScript code to handle navigation
        document.getElementById('go-back-btn').addEventListener('click', function() {
            window.location.href = 'index.html'; // Replace with your main page URL
        });
    </script>
</body>
</html>
